<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">


    <!-- 开启IOC注解扫描 -->
    <!-- 扫描@Autowired、@Resource、@PostConstruct、@PreDestroy、@PersistenceContext、@Required -->
    <context:component-scan base-package="org.kehao.lems"></context:component-scan>
    <!-- springmvc注解扫描 -->
    <!-- 扫描@RequestMapping、@Controller、@NumberFormatannotation、@DateTimeFormat、@Valid注解 -->
    <mvc:annotation-driven></mvc:annotation-driven>

    <!-- <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"></context:property-placeholder> -->

    <bean id = "propertyConfigurer" class ="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
        <property name = "locations" >
            <list>
                <value> /WEB-INF/classes/jdbc.properties </value >
            </list >
        </property >
    </bean >

    <!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${drivername}"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="3"/>
        <property name="maxActive" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="select 1 from dual"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） -->
        <!-- <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>


    <!-- 定义SQLSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" lazy-init="false">
        <property name="dataSource" ref="dataSource"></property>
        <!--配置日志打印SQL-->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"></property>-->
        <!-- SQL定义的XML -->
        <property name="mapperLocations" value="classpath:org/kehao/lems/sql/*.xml"></property>
    </bean>

    <!-- 根据Dao接口生成实现类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 会自动注入seqSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />

        <!--自动进行包扫描，扫描所有Mapper接口-->
        <property name="basePackage" value="org.kehao.lems.dao"></property>

        <!-- 手动注入，使用自动以注解方式扫描Mapper，与自动扫描不能共存 -->
        <!-- <property name="annotationClass" value="org.kehao.lems.annotation.MapperRepository"></property> -->
    </bean>


    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!-- interceptor注册拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/user/login.do"/>
            <mvc:exclude-mapping path="/user/useradd_validation.do"/>
            <mvc:exclude-mapping path="/user/send_vali_code.do"/>
            <mvc:exclude-mapping path="/user/vali_vali_code.do"/>
            <mvc:exclude-mapping path="/user/rep_user_pwd.do"/>
            <mvc:exclude-mapping path="/*.jsp"/>
            <mvc:exclude-mapping path="/*.js"/>
            <mvc:exclude-mapping path="/*.css"/>
            <mvc:exclude-mapping path="/*.png"/>
            <bean class="org.kehao.lems.web.interceptor.LoginIntercepter"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <bean id="loggerInjector" class="org.kehao.lems.utils.LoggerInjector"></bean>
</beans>